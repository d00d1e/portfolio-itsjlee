{
  "projects": [
    {
      "_id": "todo",
      "title": "Todo List",
      "imageUrl": "todoapp.jpg",
      "caption": "PWA",
      "description": "Keep track of all your daily tasks and stay organized with this simple yet effective PWA todo list.",
      "contents": [
        {
          "title": "Why a todo list?",
          "description": "Trivial at first glance but beneath its simplicity, a todo app has immense value. Building it has taught me how to implement CRUD operations, manipulate the DOM, utilize the amazing powers of css and understand version control with git/github. All of which has laid the foundation for every one of my projects. Quite proud of this one."
        },
        {
          "title": "Why a PWA?",
          "description": "After hosting this application , I was able to access my todo list only when internet connection was available. What good is a todo list if it's not easily accessible at all times? This limited the number of users that will frequent the site. With the growing number of native applications, I decided to convert this into a progressive web app for that native app-like user experience. PWA's are network independent so it can be used offline  and also downloadable, making the app available on a users desktop or mobile homescreen for easier access."
        }
      ],
      "link": "https://d00d1e.github.io/js-todo/",
      "github": "https://github.com/d00d1e/js-todo",
      "stack": [
        "JS",
        "PWA"
      ],
      "category": [
        "all",
        "JS",
        "PWA"
      ],
      "date": "June 2020",
      "featured": false
    },
    {
      "_id": "iflix",
      "title": "iFlix",
      "imageUrl": "movieapi.jpg",
      "caption": "Movie API",
      "description": "Browse movies and add them to your favorites list!",
      "contents": [
        {
          "title": "Objective",
          "description": "Build a client-side and a server-side component for a movies web application that will provide users with access to information about different movies, directors and genre. Users will be able to sign up, update personal information and create a list of their favorite movies."
        },
        {
          "title": "Challenges",
          "description": "Designing the REST API, setting up the database and creating the frontend of the application was the easier part of the project. Having the client-side communicate with the server-side proved to most challenging. Three months was spent debugging and trying to figure out why the backend is not rendering correctly in the frontend. After this setback, and also from sheer frustration, I decided to delete everything and start from scratch. This time around, while talking myself through each step of the creative process, I was able to finally see my mistake and move the project forward."
        },
        {
          "title": "Solution",
          "description": "This was my first full stack MERN project. There were so many new technologies to learn, many pieces to create and connect together that there are times where I found it difficult to see everything as a whole and figure out where my errors are coming from. After months just seeing red in the Chrome developer tools and trying to fix problems after problems, I almost gave up this project altogether. I ended up deleting the project and started everything over from scratch. This time around, everything was easier."
        }
      ],
      "link": "https://i-flix.herokuapp.com/client/",
      "github": "https://github.com/d00d1e/movie-api",
      "stack": [
        "Mongoose",
        "Express",
        "React",
        "Node",
        "Bootstrap",
        "Heroku"
      ],
      "category": [
        "all",
        "React",
        "MERN"
      ],
      "date": "January 2020",
      "featured": true
    },
    {
      "_id": "lights-out",
      "title": "Lights Out",
      "imageUrl": "lightsout.jpg",
      "caption": "Puzzle Game",
      "description": "This is a Lights Out inspired clone, a puzzle game consisting of a 5 by 5 grid of lights. Clicking a light toggles itself and its adjacent lights. The goal of the game is to switch off all the lights.",
      "contents": [
        {
          "title": "Idea",
          "description": "Build a clone of the 1995 Lights Out puzzle game by Tiger Electronics using React and the neon flux css animation from a codepen by Thomas Trinca ."
        },
        {
          "title": "Implementation",
          "description": "As a homage to my childhood gaming days, I have built quite a few games using vanilla javacript, such as snake, tetris and hangman but I have included this particular game because I built it using my favorite framework, React. I am particularly fond of compartmentalizing the components of a game, as well as keeping the css modular. As a game evolves, I can add or remove modules as necessary, making it easier to come back to and modify."
        }
      ],
      "link": "https://d00d1e.github.io/react-lightsout/",
      "github": "https://github.com/d00d1e/react-lightsout",
      "stack": [
        "React"
      ],
      "category": [
        "all",
        "React"
      ],
      "date": "October 2018",
      "featured": false
    },
    {
      "_id": "folia",
      "title": "Folia",
      "imageUrl": "folia.jpg",
      "caption": "E-commerce site",
      "description": "As a plant enthusiast and a love for all things green, I created this ecommerce site to satiate my plant addiction. You can now buy ALL the plants because one can never have enough.",
      "contents": [
        {
          "title": "Goal",
          "description": "Create a full stack MERN e-commerce site featuring login authentication, user/order/product management and payment methods."
        },
        {
          "title": "Limitations",
          "description": "Initally this project started out as shopping cart where users could browse items, add items to their cart and checkout with their name, email and address. But it did not offer the full experience of online shopping where users needed to login to checkout, pay, view past orders and check order status."
        },
        {
          "title": "Results",
          "description": "I recreated this application with a backend server and loaded products from a database. I then encorporated the shopping cart into its UI. Using redux to manage the state of users, products and cart items, I am able to track the flow of items from the database, first from the product page, to the cart, to checkout and finally to order history. I also utilized the PayPal SDK as a way to simulate payment during checkout."
        }
      ],
      "link": "https://folia-app.herokuapp.com/",
      "github": "https://github.com/d00d1e/folia",
      "stack": [
        "Mongoose",
        "Express",
        "React",
        "Redux",
        "Node",
        "PayPal SDK",
        "Heroku"
      ],
      "category": [
        "all",
        "MERN",
        "Redux"
      ],
      "date": "February 2021",
      "featured": true
    },
    {
      "_id": "world-of-orchids",
      "title": "World of Orchids",
      "imageUrl": "orchidlanding.jpg",
      "caption": "Landing Page",
      "description": "World of Orchids landing page inspired by the American Orchid Society.",
      "contents": [
        {
          "title": "Project Aim",
          "description": "Design and build a static but responsive website to showcase my css skills."
        },
        {
          "title": "Shortcomings",
          "description": "The project was build mobile-first. It worked on desktop, it worked on mobile devices, the styling I was quite proud of and all was well. But when I ran a Google Lighthouse audit, it turns out that my site was not at all \"well\". It was slow to load, it was not designed with accessibility in mind and it was not SEO optimized."
        },
        {
          "title": "The Perfect Score",
          "description": "After seeing the dismal Lighthouse report, I set out to create the website that will score 100% across all categories of the audit. I made sure to follow best practices, made the site accessible, resized and compresed all images to improve overall perfomance and lastly improved the site's SEO. Creating the perfect score website ensures that what I am building is of the highest quality."
        }
      ],
      "link": "https://d00d1e.github.io/landing-page-orchids/",
      "github": "https://github.com/d00d1e/landing-page-orchids",
      "stack": [
        "HTML5",
        "CSS",
        "JS"
      ],
      "category": [
        "all",
        "HTML5",
        "CSS",
        "JS"
      ],
      "date": "March 2021",
      "featured": false
    },
    {
      "_id": "pokédex",
      "title": "Pokedex",
      "imageUrl": "pokedex.jpg",
      "caption": "Pokémon Database",
      "description": "Click on a Pokémon card to see a detailed page of your favorite pokemon. View stats, special attacks, evolution, and more! Gotta Catch 'Em All!",
      "contents": [
        {
          "title": "Project Idea",
          "description": "Build my own pokedex for the original 151 pokemon using data from the PokéAPI."
        },
        {
          "title": "Limitations of a JS Pokedex",
          "description": "When I learning how to use APIs, one of the projects I built was a pokedex. I implemented it using vanilla javascript and later added jQuery. But my application didn't offer the best user interface. It was a page full of buttons. Users would need to scroll through the entire list of pokemon just to find the one they are looking for. It would be ideal to dedicate an entire page to each pokemon instead of opening a modal."
        },
        {
          "title": "Solution",
          "description": "Switching from JS to React, data from the API is rendered dynamically to create a better UI when viewing each pokemon. Users were able to search for a pokemon and view its stats on a separate page. I also used a different library to render higher quality pokemon sprites to give my application a more modern feel. The scalability of React also meant that I could slowly include the next 7 generations of pokemon as well."
        }
      ],
      "link": "https://d00d1e.github.io/react-pokedex/",
      "github": "https://github.com/d00d1e/react-pokedex",
      "stack": [
        "React",
        "PokéAPI",
        "Bootstrap",
        "styled-components"
      ],
      "category": [
        "all",
        "React",
        "API"
      ],
      "date": "September 2020",
      "featured": true
    }
  ]
}